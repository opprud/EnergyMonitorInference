/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 14.04.2024 20:25:51

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1504;
#else
constexpr int kTensorArenaSize = 480;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,133 } };
const TfArray<1, float> quant0_scale = { 1, { 0.69083821773529053, } };
const TfArray<1, int> quant0_zero = { 1, { -114 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[7] = { -63, -54, 189, -115, 130, -77, -17, };
const TfArray<1, int> tensor_dimension1 = { 1, { 7 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0013678142568096519, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[7*10] = { 
  102, -23, -70, -54, 8, -75, 12, 44, 18, 17, 
  44, 92, 35, -56, 31, 32, -14, -3, 8, -33, 
  -127, -66, 5, -100, 21, -1, -95, -92, -23, 103, 
  -21, -69, -65, -101, -66, -54, 32, 71, 79, 66, 
  -29, 37, 56, -29, 46, -89, -7, -26, -115, 61, 
  -18, -53, 22, 96, -47, 34, 46, 7, 54, 35, 
  65, -100, -66, 80, 65, 81, -27, -42, 74, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 7,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0070520644076168537, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[10] = { 79, 3, -10, 21, 15, 57, -14, -29, 17, 31, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0020437100902199745, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[10*20] = { 
  31, 61, -43, 6, 46, 16, 41, -72, -19, -18, 4, 40, 68, 45, 19, -39, -23, 42, -16, 44, 
  -36, -127, 26, 31, -5, -27, -63, -48, -67, -20, -38, -14, 54, 21, 32, 37, -22, 15, -69, -17, 
  -11, -47, -4, 49, -24, -28, -17, 7, -21, -5, 13, 21, -13, -42, -9, -35, 36, -46, -47, -37, 
  34, 22, 41, 2, -27, 49, -18, -25, -14, 76, 49, 32, -45, -61, -4, -16, -24, -33, 87, 45, 
  -3, 5, -41, -20, -10, 46, -26, 17, -23, 53, 61, 38, -13, -13, 17, -36, -53, 34, 70, 39, 
  -22, 59, -36, 24, -12, -41, -3, 32, -54, 15, 35, 36, -11, 27, -12, -31, -26, 38, 15, 6, 
  38, 58, -25, -36, 33, 26, -33, -25, -21, -17, 37, 29, -38, -54, 14, 7, 38, 8, -20, 2, 
  -13, 29, 17, 28, -7, 33, 39, -55, 50, -30, -30, 48, 11, -18, -57, 17, 32, -2, -13, 2, 
  35, 84, 29, 19, 57, 33, -47, -13, -20, 36, 60, 17, -3, -52, -10, 52, -42, 42, 17, 3, 
  19, -1, 6, -1, 43, 37, 24, 20, 63, -38, -27, 21, -33, -23, 38, 8, 15, 53, 4, 57, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0082764690741896629, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[20] = { 9, 111, -13, 0, -21, -2, -5, -36, -36, 71, 4, 35, 17, 27, 41, -26, -8, 38, 60, 68, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0025949280243366957, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[20*133] = { 
  -2, -40, 12, 44, 13, 14, 8, -40, 12, -47, -6, 16, -48, -35, -13, 44, 11, 36, -28, -27, 42, -15, 42, 8, -48, 33, -25, -26, -36, -47, 12, 15, 30, -45, -53, 16, -40, 32, -9, -37, 21, -6, -41, -19, -50, 38, -22, 42, -37, -43, -16, -56, 17, -13, -44, 33, 49, 39, 51, 30, 18, -25, -2, -43, -12, -38, 0, 16, 43, -8, 10, -48, -34, -14, -11, -29, 35, 22, -11, 39, 12, -3, -10, 14, -14, -1, -58, -8, -39, -48, 18, -14, -31, 38, -8, -50, 50, 28, -38, -20, -6, -58, 1, 20, -18, -24, -22, 1, -29, -26, 38, 10, -8, 23, -31, 46, -25, 16, -53, 13, 21, -2, 9, 46, -53, -11, 29, -3, 32, -15, -49, -34, 45, 
  -84, 38, 47, 38, -14, -1, 30, 37, 46, 65, -34, 9, 26, 38, 57, -4, 63, 46, 68, -20, 0, 5, 43, 9, 19, 26, 5, 58, 12, -14, 13, 62, 50, 51, 38, -16, -45, -6, 19, -11, -1, -3, 71, 54, 38, -16, 31, -37, 9, 19, -29, 13, 27, 10, 27, -17, -12, 76, 73, -22, 0, 33, -6, 14, 7, 19, 54, -39, 33, -4, 55, -25, 32, 0, -4, 33, -5, -7, 10, 54, 0, -43, -14, 16, 40, 17, 6, -28, 7, -18, 13, 27, 63, 29, 21, 47, -10, -28, 18, -41, 7, 36, -4, 1, -23, 47, 76, 11, 35, 22, -5, -59, 23, -3, -24, 40, 15, 21, -23, -21, 24, -32, 4, -12, 28, -16, 0, 33, -31, 59, -7, -14, 0, 
  35, -59, -69, -35, 20, -50, 15, 28, 38, -5, -27, 18, -39, 23, -32, 35, 17, 33, 5, 30, 61, -41, 34, -33, 19, -10, 48, 22, -28, -43, -30, 30, 24, -32, -6, -8, -27, 12, 44, -25, 46, 47, -27, 15, 44, 17, -2, -26, 17, -10, 23, -19, -19, -15, 2, -69, -16, -5, -1, -16, 45, -18, -4, 9, -11, 36, 23, -16, -4, -11, 1, -48, 9, 54, 6, -38, -42, 20, -32, -36, 18, -28, 17, -4, 0, 14, -2, 14, -21, 12, -28, 43, 7, -24, 41, 27, 10, 23, 19, 18, -47, -34, -21, -37, 18, -32, 21, 6, -23, -26, -31, 33, 17, -24, -27, -40, 30, 57, -12, 21, -28, 38, 42, -62, 37, 43, 15, 38, -35, 1, 30, -32, 20, 
  -43, 27, -28, 31, -4, 30, -5, 50, 26, -44, 42, 42, 25, 32, 22, -12, -40, -25, 17, 33, -34, 21, -34, -19, 31, 26, -37, 31, 43, 34, -23, 21, 44, -23, 31, 7, 51, -50, 10, 36, -43, 32, 1, 40, 50, -40, -2, -33, 31, 24, -34, -2, -10, -52, 12, -40, -45, -51, -21, -6, 47, 18, 49, 37, -35, -47, 29, -45, -33, -48, 30, -27, -28, -37, 11, 18, -13, 52, 19, 51, 10, 34, 36, -16, -10, -42, -5, -20, 32, -21, 21, 18, -43, 6, 43, -20, -31, -10, 41, -13, -17, -5, 42, -30, -25, -3, 6, -14, 9, 14, -44, 8, -2, 38, 3, 47, -47, 2, 36, -3, -48, 42, 2, 16, -44, 2, -1, -31, 13, 17, -20, -47, -14, 
  44, 4, -19, -30, -26, -33, 44, -14, -28, 24, -25, -10, -43, -31, -44, 20, 21, 25, -15, -24, -19, 31, -28, -24, -30, -12, 21, 17, -70, -64, 2, -50, 37, -44, -22, -29, -14, -47, 5, 22, -2, 12, -45, -16, 33, -31, 36, 31, -8, 26, 28, 36, -36, -9, -10, 48, 27, 29, 35, 19, -52, -50, 30, 33, -12, 15, -37, 39, -63, -25, -56, 3, 23, 5, 11, 15, -27, -19, -30, -23, 37, -56, 20, -43, 12, -36, 5, -47, 21, -23, -16, 9, 21, 41, 22, 7, 16, -6, -39, -42, -12, -52, 3, -26, 34, -39, -51, -12, -31, 23, -28, 2, -28, -6, 18, -3, -19, -37, -31, -12, 38, -21, -33, -5, -40, 8, 50, -46, -35, 13, -22, -13, 16, 
  -17, 37, 7, -4, -19, -38, 8, 53, -19, 12, -49, -22, -55, 22, 7, -3, -49, 14, -17, 3, -42, -45, -7, -27, 36, -17, 11, -11, -28, 49, -13, -8, 38, -34, 11, -49, 36, -31, 19, 44, 34, 18, -38, -16, 6, -55, -43, -36, -1, 34, 46, -8, 16, -23, 22, 30, 16, -8, 28, 3, 11, -52, 35, -40, -15, -1, -20, 40, 44, 22, 47, -24, 34, -41, -59, -35, -7, -9, 32, -1, -42, 18, -28, 39, -6, -41, 15, -4, 51, -10, 6, 3, -33, 39, 0, -9, -8, 16, 0, 33, -5, 18, 43, -29, 11, 8, 50, -36, 17, 28, -5, -3, 18, 33, 38, 11, 26, -40, 14, -33, -52, 28, -41, 7, 2, 49, -8, -21, -27, -49, 2, 15, -34, 
  28, 19, -30, -3, 4, -32, -4, 48, -9, 11, -17, -3, 11, 39, 28, -2, -15, -21, 56, 46, -19, 17, -15, 20, -36, -12, 47, -54, 24, -6, 13, -64, 1, 1, -30, 35, -52, 11, -45, 52, -7, 10, -5, -4, -36, -57, 35, -42, -10, -22, -43, 31, -57, 18, 5, -22, -15, 25, 8, -35, -39, -4, 12, -50, 8, 1, -57, 25, -45, -33, 4, 40, -25, 12, 5, 26, 16, 34, 16, -27, 33, 20, -6, 7, -39, -30, 15, -5, -36, -30, -40, 31, -19, 51, -9, -40, -14, -23, -41, 1, -19, -24, 0, -22, 38, -25, -16, -42, -33, -5, -7, 23, 28, -57, 15, -11, 26, -25, -48, -23, -37, 2, -51, -5, -19, -40, -3, 21, -22, -51, 16, -56, -27, 
  68, 23, -25, 40, 55, 37, 25, 29, -10, 51, -17, 28, -17, 20, -38, -55, -23, -33, -40, 46, 44, -28, -23, -25, -19, 46, -23, -8, -79, -44, -32, 12, -5, -38, -1, -34, -8, 3, 31, -16, -12, 4, 32, 19, -13, -32, -9, -45, -16, 39, -37, -34, -44, -30, -56, -73, -85, 0, 4, -71, -43, -38, -1, -63, 7, 4, 10, -19, -22, 55, -33, 2, -19, 14, -6, 6, -24, 26, -39, 15, 40, -65, 21, -13, 2, -59, 6, 7, 15, -36, -16, -42, 11, -31, -50, -38, -32, -58, -12, 38, -18, 33, -8, -59, -23, -30, -25, -50, 47, -20, -38, -55, -1, 12, 21, -45, 21, -21, -34, 2, -39, -9, -26, -64, 1, 1, -39, -40, -11, -8, 32, 1, 3, 
  55, 107, -6, -4, -25, 64, 11, -19, 5, 1, 4, 20, 34, -17, 9, -24, 19, -27, 49, 8, 48, 38, 45, 9, 22, 20, 19, -35, 8, -86, -15, -85, -25, 6, -25, 3, -35, 44, -32, 10, -25, -34, -65, -45, -69, -3, -29, 2, -3, 41, -38, -61, 31, -59, -3, -6, -22, 0, -27, -35, 26, -28, 24, -42, -15, -59, 41, 38, 33, -25, -24, -22, 5, -41, -8, -44, -40, -28, -41, 34, -37, -41, -51, -35, 31, 3, -14, 9, 16, 16, 2, -39, -37, -10, 36, -15, 35, 3, 17, -25, -25, -26, -36, 3, -21, 12, -30, -12, -2, -19, -38, 25, 5, 17, 23, 27, 0, -46, 28, -30, 16, 21, -14, -32, 18, -52, 18, 55, -50, 39, -44, 48, -31, 
  -39, -29, 8, 7, -80, -30, -76, -11, -29, -42, -45, -65, -76, -27, -40, 49, 4, 41, 46, -24, 1, 48, 30, 67, 49, 18, -6, 12, 9, 38, -7, 1, -21, 18, 51, 28, 49, 53, -12, -1, 13, 40, -9, 30, -3, -34, 48, 30, 30, -47, 35, 54, -46, -46, -21, 24, 45, 22, -34, 29, -47, -38, -43, 36, 1, -4, -41, -12, -34, 30, -23, 41, 39, -8, -20, -49, 44, -5, -44, 42, 30, 49, -55, -39, -35, 50, -33, -27, 21, 20, 58, 36, -1, 10, 21, 58, 6, -54, -39, -19, 35, -40, -28, -4, 24, 14, -35, -7, 36, 33, 33, -34, -45, -16, 60, 55, 63, 51, 56, 46, 63, -29, -5, 50, -27, 2, 34, -3, 0, 46, 2, -9, -8, 
  53, -29, 14, -97, -95, -44, 11, -8, -16, 12, -37, -5, -4, -58, 4, -52, -22, -21, -3, -8, -61, 10, -64, 45, 40, -21, -32, -20, 40, 41, -42, -31, -33, -1, 60, 52, -4, -37, -37, 25, 43, 22, 33, 15, 15, 64, 27, -34, 25, 25, -18, -37, -17, -14, 19, 31, -37, -16, 19, -3, 8, 0, 24, 22, 6, -54, -46, 23, 22, 13, 40, 5, -6, -11, 6, 40, 6, -41, 11, 37, -32, -36, 18, -28, -14, 47, -9, 25, -14, -27, -1, 54, 30, -24, -7, 4, -29, 17, -48, 18, 33, 20, 4, 5, 13, -28, -1, -52, 35, 0, -20, -11, 10, 28, -50, 6, -12, 47, -21, -33, -31, -47, -36, -45, 34, 14, -38, 12, 27, -45, 35, -21, -34, 
  -9, 48, 33, -39, -78, -54, 52, -17, 44, -5, 51, 41, 30, 47, -22, 20, -26, -24, 40, -8, -21, -19, 38, 19, 17, 18, 38, 34, 66, 37, 15, 10, 17, -9, 25, -4, -26, 18, 22, 41, 45, 63, 69, 14, -8, -3, 23, 37, -42, 15, -27, 44, 22, 21, 46, 32, 38, 9, 24, -28, 46, 25, 10, -7, 45, 42, 45, -3, -6, -5, -33, 9, -15, -11, 54, 16, 28, 49, 21, 2, 17, 50, -37, -16, -34, -30, -17, 43, -1, 32, 21, -35, -40, -30, 18, 23, 28, 39, -5, -12, -8, -15, 25, 31, 33, 32, 26, 74, 22, -29, -9, 1, 11, 18, -42, -32, -43, 9, 37, 21, 51, 50, 10, -4, 0, -10, -12, -27, 60, 45, -26, 34, 14, 
  -30, -127, 54, 16, 74, -16, -6, -28, -25, 32, -9, -21, 32, 46, 3, 60, 28, 3, 63, 4, 40, 41, -14, 39, 34, 0, 23, 4, 74, 18, 10, 38, -37, 37, 13, 13, 30, -30, -51, -53, -33, -15, -56, -32, -57, -24, 41, 13, -20, 23, 35, -23, -11, 62, 32, 15, 20, 57, 22, 43, -4, -12, -24, 51, 18, 7, 16, -3, -11, 22, -6, -24, 19, 18, 2, -48, -14, 56, -17, -16, 37, 42, 56, 41, 54, 35, -54, -39, 7, 49, -27, 47, 6, 8, -29, -36, 30, 14, 43, -6, -32, 38, 43, 39, 24, -25, 9, 54, 33, 14, 9, -2, 13, -24, -18, 28, -16, -15, 53, 39, 49, 13, 37, -8, 36, 33, -60, 20, -33, 44, -3, 28, 32, 
  3, -94, -26, 32, 85, 61, -33, 60, 1, 16, 1, 39, 64, 31, 7, -19, -34, 10, -23, 1, -18, -17, 26, -11, -29, -50, -30, 51, -8, 2, 19, -48, -35, -55, -18, 0, 4, -15, 39, -18, 43, 20, 37, -43, 35, -36, -18, 8, 37, 13, 5, 20, -35, -20, 58, -15, 1, 23, 15, -17, -1, -8, -5, -37, 36, 40, 42, 41, 12, 53, -38, -5, 26, -31, 3, -50, -38, -29, 24, -35, -30, 3, -41, -40, 8, -14, 19, 28, -8, -55, -2, 1, -44, 27, -43, -27, -15, 53, 0, -24, 12, 43, 18, -38, -34, 7, -20, -20, -31, 5, 21, -58, -42, 3, -43, 21, 20, -38, 26, -45, 2, -20, -26, -20, 42, 0, -58, 22, 0, 24, -65, -66, -27, 
  39, 17, 9, 53, 45, -12, 0, 42, 47, 32, 62, -14, -19, 77, -21, 11, -14, 39, 61, -12, 70, 75, 1, 61, -25, 0, 22, -14, 66, 11, 80, -3, -4, 41, 0, -28, -42, 28, 62, -32, -47, 45, -47, 38, -6, 37, -13, -26, -31, -9, 10, 49, 45, 18, -8, -4, 72, 8, 65, -10, 27, 58, 3, 87, 44, 80, 72, 59, 20, 57, 36, -2, 71, -5, 58, 47, 2, 39, 31, 37, 57, 30, -11, -3, 31, -27, 54, 15, -28, 33, -3, 34, 12, 55, -14, 31, 73, 70, 68, 77, -25, 71, -2, 70, -10, 11, 60, -14, 11, -2, 7, 29, 76, 47, -18, 63, 80, -16, 73, 79, 12, 30, 33, 6, 0, -6, 19, 68, 66, -14, 3, -11, 12, 
  13, 2, -39, -18, -6, 18, -6, 7, 16, 19, 8, 25, -23, 31, 34, 51, 19, 34, 32, 45, -37, 48, -38, 17, 21, 3, -27, -23, -13, -34, 5, -28, -23, 28, -4, 20, 24, -27, 18, 41, 25, -26, 24, -20, 62, -4, -21, 2, -29, 26, 21, 4, 55, 65, 39, -17, 51, 24, -35, 47, 7, -22, 5, -27, 5, 16, 4, -35, 3, 26, -52, 38, 35, 41, 29, 48, -16, 18, 58, 42, -11, -13, 18, 53, 53, 46, 13, 33, 46, 75, 24, 66, 19, 40, 54, 41, -34, 37, 37, 32, 50, 64, 70, 2, 45, -32, 2, 10, 45, -24, 36, -9, -17, 34, 48, -11, 1, -30, 10, 4, -18, 19, -4, -14, 32, 4, -24, -17, -5, -29, -1, -5, 28, 
  7, 98, -27, 22, 68, -1, -11, -34, 22, -46, -48, -8, 19, 32, -9, 29, -31, -16, 34, -8, -36, -21, 29, -21, 23, -14, -15, 22, -64, 6, -12, -27, 27, -30, -2, -12, 21, -36, -6, 19, 6, -12, -2, 21, -24, -56, 34, -37, 31, 9, 21, -1, -14, -51, -28, -79, -43, -46, 6, -53, -28, 58, -18, 21, -21, 47, 28, 12, 26, 75, -25, 1, -21, 53, 46, 39, -11, 23, -25, 16, 11, 38, -56, -21, -6, 36, 6, -31, 47, -12, 17, 64, 68, 30, 27, -10, 21, 0, 56, -9, 9, 9, 7, 0, 42, 27, 20, 51, 1, -19, 42, 32, 52, -40, -44, 21, -7, 62, -12, -28, 36, 1, -22, 3, 61, 28, 11, -37, 47, 46, -10, 43, -3, 
  -33, 63, 64, 47, 45, -17, -18, 47, 20, -10, -25, 42, -17, 40, -33, -13, -32, 17, 49, -32, 19, -35, -54, 48, -28, -36, -18, 27, 7, -19, 1, -35, 1, 7, -1, 43, 42, -35, 30, -50, -59, -26, 39, -29, 2, -51, -11, 40, -44, 27, -18, -17, 67, 53, 43, -7, 72, -18, 9, -13, 20, -42, 31, 54, -7, 30, -9, -3, 9, -22, 31, -28, 27, 45, 18, 9, -35, -29, 47, -30, -29, -35, -33, 19, 35, 49, -23, 8, 6, 18, -7, 51, -46, -28, 34, 20, 13, -26, 40, -59, 32, 8, -2, -27, -18, -31, -9, 80, 41, -35, -41, -26, 26, -11, -44, 6, 28, 44, -27, -11, -37, 42, 8, 40, -6, 15, 20, 43, 52, 49, 31, 26, -36, 
  -35, -49, 45, -89, 23, -31, -46, -5, 0, -22, -66, -37, -41, -22, -28, -15, 17, -17, -16, 32, -14, 54, -27, 29, -37, -42, 8, -1, -28, -14, 47, -2, -16, -36, 56, 37, -1, -40, -44, -17, -23, 32, -9, 49, 22, 9, 65, 13, -54, -55, 6, -34, 41, -6, 60, -11, -10, -11, 4, 52, -13, -45, -51, 39, 37, -15, 60, -28, 17, 60, 44, 37, 44, -28, -64, 10, 56, 26, -3, 30, 29, 36, 60, 13, 40, 23, 53, 0, -3, -32, -35, 55, 42, -4, -23, -23, 45, 27, 58, -30, -60, 54, 22, 18, -13, 11, -15, -24, 16, 39, -31, 4, -65, -34, -25, -30, 34, 32, -35, -37, 59, -14, 1, 23, 24, 40, -20, -18, 13, 19, -30, -9, 11, 
  2, 122, -9, -40, -56, -15, 34, 16, 64, 63, -23, 52, 51, 17, 14, -7, 12, -31, -17, 23, -9, -33, 49, -11, 13, 18, -9, 3, 47, 73, -7, 39, 72, -3, 31, 36, -38, 19, 26, 26, 5, 1, 43, 52, 14, -37, -40, 35, 12, 42, 37, 38, -38, 21, 22, -23, 44, -18, -10, 67, -23, 42, -13, 42, -17, 23, 22, -5, -14, -4, -25, 58, 15, 28, 14, 31, -27, -36, -41, -24, 39, 6, 13, -24, 13, 43, 71, 22, 28, 1, -50, 20, -22, -3, 21, -37, -31, -31, 61, -19, -7, 36, 28, -41, -1, 57, -14, 0, 31, 55, 59, 30, -58, -31, 28, 9, 2, -20, -15, 4, 55, 13, 33, -15, 23, 44, -21, 23, -8, 18, -19, 15, 46, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,133 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0037562022916972637, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.24693019688129425, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.19395941495895386, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,7 } };
const TfArray<1, float> quant9_scale = { 1, { 0.22998283803462982, } };
const TfArray<1, int> quant9_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,7 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 133, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 28, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 2660, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 144), (TfLiteIntArray*)&g0::tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 7, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 7, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}

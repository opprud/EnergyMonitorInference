/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 14.04.2024 21:00:29

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1504;
#else
constexpr int kTensorArenaSize = 480;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,133 } };
const TfArray<1, float> quant0_scale = { 1, { 0.69083821773529053, } };
const TfArray<1, int> quant0_zero = { 1, { -114 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[7] = { -94, -78, 283, -168, 206, -131, -32, };
const TfArray<1, int> tensor_dimension1 = { 1, { 7 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00084733427502214909, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[7*10] = { 
  114, -13, -86, -66, 14, -82, 4, 55, 13, 29, 
  57, 103, 43, -75, 27, 41, -7, -4, 18, -39, 
  -127, -78, 6, -101, 29, -1, -74, -114, -14, 119, 
  -12, -91, -81, -121, -61, -66, 33, 88, 94, 84, 
  -18, 35, 70, -16, 55, -110, -1, -32, -120, 71, 
  -25, -64, 27, 118, -56, 41, 54, 8, 67, 43, 
  84, -124, -82, 89, 74, 95, -32, -52, 87, 1, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 7,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0056784041225910187, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[10] = { 83, 13, -13, 25, 28, 55, -34, -37, 13, 29, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0015105314087122679, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[10*20] = { 
  32, 36, -47, 7, 53, 18, 55, -76, -18, -6, 5, 44, 80, 55, 26, -45, -20, 25, -9, 50, 
  -32, -127, 31, 37, 8, -30, -53, -58, -71, -12, -43, -18, 60, 17, 37, 45, -28, 28, -62, -18, 
  -13, -56, -4, 58, -29, -34, -21, 9, -25, -6, 15, 26, -15, -50, -10, -41, 44, -56, -56, -45, 
  34, 24, 48, 2, -33, 51, -30, -30, -16, 69, 58, 38, -50, -68, -5, -19, -29, -36, 88, 54, 
  -16, 35, -53, -24, -25, 48, -20, 19, -36, 61, 63, 42, -20, 11, 17, -46, -50, 43, 73, 43, 
  -42, 63, -43, 28, -15, -59, -3, 39, -64, 0, 42, 42, -20, 32, -15, -37, -26, 40, -4, 10, 
  48, 28, -28, -44, 48, 36, -15, -22, -16, -21, 45, 27, -46, -46, 14, 6, 39, -6, -18, -4, 
  -15, 36, 21, 34, -8, 43, 46, -66, 60, -32, -36, 58, 15, -18, -67, 22, 39, -2, -13, 9, 
  37, 63, 33, 23, 59, 31, -63, -14, -19, 30, 63, 21, -4, -64, -12, 61, -47, 40, 5, 4, 
  23, -15, 3, -1, 51, 48, 15, 18, 62, -52, -27, 25, -39, -26, 42, 5, 9, 59, 1, 64, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0068995282053947449, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[20] = { -1, 86, -8, 0, -20, -5, -2, -21, -28, 54, 7, 25, 17, 23, 41, -24, -10, 19, 45, 63, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00238634436391294, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[20*133] = { 
  -3, -16, -10, 45, 13, 23, 13, -40, 16, -48, -5, 17, -53, -39, -15, 47, 12, 38, -30, -30, 46, -17, 45, 8, -54, 34, -29, -30, -41, -53, 11, 15, 32, -49, -55, 22, -38, 37, -9, -41, 22, -8, -45, -20, -52, 43, -23, 47, -40, -43, -13, -56, 20, -15, -50, 34, 51, 40, 53, 31, 19, -26, 2, -43, -11, -42, -1, 16, 45, -10, 11, -51, -37, -17, -14, -33, 37, 24, -10, 43, 13, -4, -12, 15, -14, 4, -60, -9, -45, -55, 17, -16, -32, 44, -9, -56, 51, 28, -45, -24, -7, -60, 8, 25, -18, -26, -24, 0, -33, -29, 42, 13, -2, 32, -31, 49, -28, 17, -59, 15, 23, -2, 10, 50, -58, -12, 33, 0, 41, -12, -52, -36, 49, 
  -74, 10, 49, 40, -12, -19, 15, 23, 34, 58, -41, 14, 19, 32, 55, -10, 64, 47, 74, -17, 6, 9, 54, -5, 26, 34, 7, 63, 12, -17, 14, 72, 63, 64, 45, -18, -52, -7, 18, -14, -4, -6, 80, 63, 52, -1, 49, -37, 2, 3, -45, 4, 18, 0, 18, -30, -26, 71, 68, -30, -4, 36, -19, 3, 2, 17, 60, -39, 46, 3, 69, -18, 42, 1, 3, 42, -12, -19, 6, 59, 1, -47, -18, 13, 39, 15, -4, -39, 8, -15, 21, 27, 63, 28, 20, 48, -13, -35, 16, -50, 6, 46, -2, -2, -28, 43, 65, -10, 14, 7, -11, -58, 40, 6, -22, 49, 17, 17, -34, -30, 24, -41, -7, -22, 25, -18, -8, 26, -38, 62, -11, -13, 22, 
  36, -40, -64, -43, 13, -42, 25, 38, 47, -5, -33, 17, -42, 26, -34, 39, 19, 34, 3, 28, 60, -49, 34, -34, 15, -14, 51, 24, -33, -49, -34, 30, 23, -42, -10, -11, -34, 10, 44, -32, 41, 42, -40, 5, 37, 7, -11, -31, 25, -9, 30, -14, -14, -8, 16, -60, -4, 4, 6, -14, 52, -17, -3, 14, -11, 38, 18, -26, -12, -17, -2, -55, 6, 53, -1, -45, -46, 26, -32, -37, 21, -31, 20, -3, 3, 13, -5, 12, -30, 10, -34, 47, 10, -24, 50, 34, 15, 27, 22, 21, -50, -41, -24, -40, 22, -31, 32, 20, -13, -20, -29, 35, 15, -31, -28, -42, 31, 61, -11, 26, -27, 46, 54, -58, 48, 50, 21, 44, -39, 2, 35, -32, 19, 
  -47, 30, -30, 34, -5, 33, -6, 55, 28, -48, 46, 45, 27, 35, 24, -13, -43, -27, 19, 36, -37, 23, -37, -21, 34, 29, -41, 34, 47, 37, -25, 23, 47, -25, 34, 7, 55, -54, 11, 39, -47, 34, 1, 44, 54, -44, -2, -36, 34, 26, -37, -2, -11, -57, 13, -44, -48, -56, -23, -7, 51, 19, 53, 40, -38, -51, 32, -49, -36, -52, 32, -30, -31, -41, 12, 19, -14, 57, 20, 55, 11, 36, 39, -17, -11, -46, -5, -22, 34, -23, 23, 19, -47, 7, 47, -22, -34, -11, 44, -14, -18, -5, 45, -33, -27, -3, 7, -15, 10, 16, -47, 9, -2, 41, 3, 51, -51, 2, 39, -3, -53, 45, 2, 18, -47, 2, -1, -34, 14, 18, -22, -51, -15, 
  46, 18, -6, -33, -32, -43, 43, -20, -34, 24, -26, -4, -46, -34, -48, 21, 23, 27, -15, -24, -18, 39, -26, -22, -28, -9, 28, 23, -69, -62, 10, -50, 41, -49, -26, -34, -22, -58, 3, 24, -3, 10, -54, -24, 29, -39, 37, 29, -14, 30, 30, 37, -45, -16, -18, 48, 27, 32, 39, 23, -55, -51, 40, 40, -10, 20, -36, 45, -66, -24, -59, 5, 28, 9, 14, 19, -26, -21, -31, -25, 39, -58, 24, -45, 13, -38, 7, -47, 29, -25, -22, 3, 15, 39, 19, 4, 13, -10, -42, -46, -14, -55, 8, -22, 44, -36, -55, -14, -37, 20, -34, 0, -33, -5, 19, -5, -22, -40, -32, -10, 47, -18, -33, -6, -46, 7, 52, -49, -33, 18, -21, -12, 22, 
  -19, 39, 7, -7, -23, -40, 10, 58, -22, 12, -54, -24, -60, 23, 7, -4, -54, 13, -20, 2, -47, -50, -8, -30, 39, -19, 11, -12, -31, 53, -14, -9, 41, -37, 11, -54, 38, -35, 20, 47, 36, 18, -42, -19, 6, -60, -47, -39, -2, 36, 49, -10, 16, -26, 22, 31, 16, -10, 29, 2, 12, -57, 36, -46, -18, -3, -23, 42, 46, 23, 51, -27, 37, -44, -63, -39, -8, -10, 35, -2, -46, 18, -31, 43, -6, -44, 17, -4, 55, -12, 5, 2, -37, 41, -1, -10, -10, 17, -1, 35, -7, 17, 46, -33, 11, 8, 53, -40, 17, 29, -7, -5, 18, 35, 40, 10, 27, -45, 14, -36, -57, 30, -46, 7, 1, 52, -10, -23, -29, -53, 2, 17, -37, 
  26, -2, -37, -6, -2, -41, -8, 49, -12, 10, -11, -3, 7, 39, 28, -4, -18, -25, 60, 48, -23, 15, -21, 27, -32, -10, 52, -54, 35, 5, 29, -59, 1, -5, -43, 30, -60, 15, -51, 53, -11, 8, -10, -5, -38, -61, 41, -45, -16, -24, -47, 37, -59, 24, 9, -18, -11, 32, 16, -33, -42, 1, 28, -44, 16, 6, -59, 29, -48, -35, 5, 45, -23, 17, 6, 28, 20, 40, 21, -28, 36, 24, -6, 9, -40, -26, 25, 3, -35, -32, -47, 31, -25, 52, -16, -51, -23, -31, -49, -4, -30, -34, -3, -24, 44, -23, -18, -46, -36, -8, -9, 25, 33, -62, 12, -15, 28, -26, -52, -23, -36, 6, -52, -4, -22, -45, -7, 20, -24, -57, 15, -64, -26, 
  68, 6, -20, 48, 62, 37, 28, 33, -9, 55, -17, 43, -16, 25, -37, -56, -20, -32, -39, 53, 49, -30, -25, -13, -18, 53, -21, 1, -76, -33, -15, 30, 3, -44, -9, -45, -13, 6, 36, -16, -8, 13, 47, 36, -2, -27, -5, -53, -26, 37, -41, -31, -39, -26, -55, -73, -86, 7, 12, -73, -47, -33, 12, -55, 21, 14, 18, -16, -19, 64, -31, 10, -12, 22, -3, 8, -24, 28, -40, 16, 43, -70, 23, -11, 6, -62, 12, 13, 23, -34, -20, -49, 9, -33, -50, -33, -27, -57, -6, 46, -19, 33, -8, -61, -22, -32, -31, -55, 50, -24, -40, -56, -1, 13, 30, -41, 30, -19, -30, 12, -31, 2, -17, -59, 10, 10, -41, -47, -13, -12, 31, -5, -7, 
  51, 96, 7, -2, -27, 63, 9, -23, 4, -3, 2, 27, 36, -20, 9, -26, 21, -29, 53, 8, 50, 37, 46, 13, 26, 26, 26, -27, 21, -77, 3, -76, -20, 1, -38, -9, -48, 44, -39, 6, -30, -35, -63, -38, -67, 1, -32, -8, -20, 28, -51, -67, 37, -60, 1, -2, -20, 1, -27, -37, 27, -23, 36, -36, -8, -60, 46, 40, 35, -29, -26, -21, 7, -44, -13, -50, -45, -33, -45, 34, -43, -47, -57, -37, 37, 4, -11, 12, 22, 21, -5, -53, -51, -16, 37, -14, 41, 5, 19, -30, -34, -34, -37, 9, -14, 20, -31, -10, 0, -19, -38, 28, 4, 18, 30, 36, 5, -47, 35, -27, 25, 31, -10, -29, 22, -56, 12, 54, -57, 38, -55, 43, -50, 
  -44, -7, 0, 8, -61, -20, -86, -23, -45, -62, -55, -60, -78, -30, -43, 52, 3, 43, 49, -29, -4, 45, 26, 70, 59, 29, -4, 13, 8, 38, -12, -4, -28, 15, 53, 29, 49, 54, -14, 3, 15, 41, -14, 28, -9, -41, 51, 33, 33, -54, 35, 59, -47, -43, -19, 27, 49, 23, -37, 30, -52, -40, -47, 39, 2, -2, -41, -5, -28, 36, -24, 46, 43, -9, -21, -52, 48, -5, -45, 51, 40, 65, -41, -28, -30, 57, -38, -33, 21, 19, 59, 37, -2, 9, 23, 67, 14, -51, -41, -24, 36, -46, -33, -6, 24, 13, -41, -9, 39, 37, 40, -25, -40, -15, 63, 55, 63, 50, 57, 47, 65, -34, -7, 57, -23, 22, 44, -4, -5, 45, -2, -13, -10, 
  54, -2, 28, -91, -90, -52, 10, -11, -21, 8, -46, -2, -4, -62, 8, -52, -19, -18, 3, -4, -63, 13, -66, 44, 41, -22, -36, -24, 38, 38, -53, -40, -40, -7, 60, 53, -12, -42, -41, 24, 38, 13, 25, 6, 6, 61, 23, -42, 32, 23, -19, -39, -17, -12, 28, 40, -39, -21, 18, -5, 11, 7, 28, 29, 10, -56, -49, 27, 26, 17, 45, 7, -10, -19, 0, 43, 7, -44, 15, 45, -31, -39, 20, -33, -18, 45, -15, 21, -19, -29, -1, 56, 30, -27, -6, 7, -29, 21, -51, 22, 39, 26, 15, 13, 20, -30, -1, -55, 40, 1, -19, -8, 10, 26, -56, 7, -16, 49, -23, -35, -32, -50, -38, -48, 39, 16, -45, 11, 29, -50, 38, -23, -38, 
  -8, 49, 42, -33, -72, -64, 51, -25, 42, -11, 50, 45, 33, 50, -23, 24, -26, -22, 48, -2, -16, -15, 49, 10, 18, 22, 40, 34, 67, 33, 9, 4, 17, -9, 27, -6, -34, 18, 22, 42, 43, 62, 71, 12, -10, -2, 26, 38, -45, 5, -35, 44, 21, 22, 52, 35, 36, 1, 18, -35, 49, 30, 3, -10, 48, 45, 49, -2, -2, -2, -32, 12, -19, -20, 54, 17, 27, 48, 23, 6, 22, 53, -43, -22, -43, -39, -26, 37, -3, 37, 29, -38, -46, -33, 20, 25, 32, 43, -6, -14, -9, -9, 36, 37, 37, 31, 19, 70, 14, -39, -10, 5, 16, 18, -50, -36, -50, 7, 37, 21, 56, 52, 6, -9, -4, -16, -24, -37, 61, 46, -31, 34, 18, 
  -33, -127, 50, 13, 76, -24, -12, -35, -30, 37, -5, -27, 32, 48, -1, 61, 26, -1, 65, 1, 41, 45, -18, 43, 39, -2, 23, -1, 77, 15, 5, 36, -44, 45, 22, 24, 42, -31, -51, -50, -26, -8, -57, -32, -58, -23, 49, 23, -17, 40, 41, -29, -21, 57, 18, 0, 9, 54, 17, 43, -6, -21, -28, 51, 15, 8, 22, 3, -9, 26, -8, -29, 21, 26, 7, -51, -13, 60, -23, -21, 37, 45, 62, 46, 59, 44, -52, -34, 11, 51, -30, 55, 10, 10, -35, -44, 29, 14, 45, -7, -34, 42, 43, 39, 21, -29, 9, 57, 36, 16, 9, -3, 17, -18, -20, 28, -16, -12, 59, 41, 48, 9, 35, -14, 35, 35, -60, 27, -32, 50, -1, 33, 39, 
  4, -70, -27, 27, 86, 67, -36, 64, 1, 17, 4, 30, 64, 29, 3, -27, -43, 5, -32, -7, -29, -30, 13, -18, -30, -57, -36, 54, -5, 8, 23, -51, -40, -60, -18, 3, 14, -12, 39, -26, 42, 17, 36, -52, 35, -41, -20, 12, 42, 18, 8, 24, -37, -18, 66, -11, 13, 37, 24, -15, -2, -15, -8, -42, 35, 39, 40, 38, 7, 51, -48, -11, 29, -27, 10, -49, -36, -27, 29, -31, -25, 14, -32, -33, 17, -6, 27, 35, -9, -60, -1, 5, -45, 28, -53, -38, -23, 53, -2, -30, 9, 45, 14, -41, -35, 17, -9, -13, -24, 15, 28, -58, -41, 9, -43, 26, 26, -37, 30, -50, 0, -22, -27, -20, 49, 3, -58, 30, 6, 33, -63, -63, -16, 
  42, -12, 0, 48, 40, -16, -2, 43, 49, 36, 70, -26, -24, 81, -28, 7, -22, 35, 59, -20, 70, 76, -7, 61, -31, -7, 19, -19, 72, 11, 84, -6, -5, 48, 2, -29, -38, 28, 62, -39, -50, 52, -49, 44, -3, 42, -13, -28, -40, -11, 7, 50, 46, 20, -11, -6, 79, 11, 72, -12, 26, 51, -7, 81, 35, 76, 70, 57, 12, 52, 28, -12, 71, -7, 64, 48, 0, 40, 27, 34, 57, 29, -16, -7, 29, -30, 58, 17, -32, 31, -6, 37, 12, 54, -24, 23, 68, 66, 65, 76, -34, 71, -12, 69, -18, 9, 65, -19, 8, -6, 1, 23, 76, 48, -28, 60, 80, -23, 70, 75, 0, 20, 23, -5, -11, -17, 17, 71, 68, -20, -1, -16, 8, 
  11, 12, -41, -31, -21, 27, 0, 13, 23, 23, 8, 30, -26, 32, 34, 52, 17, 33, 29, 42, -45, 51, -43, 27, 22, 4, -27, -23, -13, -35, 9, -29, -29, 24, -8, 19, 18, -38, 16, 44, 25, -33, 17, -34, 53, -18, -33, -1, -31, 39, 28, 4, 54, 64, 38, -20, 57, 30, -37, 52, 8, -24, 13, -26, 5, 16, -1, -44, -3, 25, -60, 38, 38, 45, 29, 49, -17, 20, 61, 39, -20, -18, 18, 58, 59, 48, 14, 39, 47, 74, 14, 64, 16, 39, 56, 43, -40, 37, 40, 36, 56, 65, 72, -2, 49, -32, 8, 19, 55, -25, 36, -18, -25, 34, 53, -17, -4, -36, 10, 6, -18, 23, 2, -11, 35, 5, -21, -15, -4, -30, 2, -2, 32, 
  11, 42, -31, 13, 68, 4, -7, -31, 30, -44, -47, -9, 22, 35, -11, 29, -37, -21, 33, -12, -41, -26, 28, -21, 28, -15, -12, 35, -54, 24, 4, -14, 38, -32, -8, -20, 23, -44, -18, 10, 1, -14, 0, 27, -23, -60, 35, -49, 14, -4, 15, -4, -15, -52, -23, -74, -31, -34, 20, -49, -33, 59, -23, 14, -31, 39, 15, -5, 14, 68, -36, -3, -23, 57, 52, 41, -16, 21, -32, 12, 8, 43, -61, -22, -6, 39, 5, -33, 54, -13, 12, 62, 62, 20, 17, -22, 11, -11, 56, -16, 5, 3, -1, -4, 48, 35, 24, 54, -4, -27, 38, 24, 49, -48, -50, 20, -12, 58, -23, -40, 34, -3, -28, 1, 63, 26, 7, -43, 51, 50, -11, 46, -4, 
  -25, 45, 80, 38, 35, -30, -29, 43, 15, -12, -26, 49, -24, 37, -43, -21, -42, 12, 49, -36, 24, -33, -51, 51, -33, -42, -24, 25, 4, -25, -1, -38, 4, 12, 2, 49, 45, -37, 34, -53, -59, -22, 53, -21, 14, -42, 0, 49, -47, 25, -25, -28, 61, 42, 31, -26, 59, -36, -3, -23, 17, -48, 26, 54, -11, 31, -7, 1, 17, -17, 42, -22, 35, 51, 24, 13, -44, -38, 47, -37, -36, -42, -41, 17, 35, 54, -25, 8, 7, 21, -3, 56, -52, -29, 39, 27, 20, -24, 46, -60, 41, 16, 2, -31, -24, -43, -27, 71, 31, -46, -46, -26, 39, -4, -42, 13, 36, 52, -30, -11, -38, 49, 12, 47, -3, 20, 22, 46, 54, 52, 32, 27, -33, 
  -38, -35, 41, -59, 13, -27, -50, -7, 0, -22, -65, -35, -52, -35, -36, -19, 18, -18, -15, 37, -14, 59, -25, 40, -31, -48, 3, -7, -36, -21, 46, -5, -19, -38, 66, 48, 7, -38, -45, -20, -29, 30, -15, 49, 21, 8, 72, 20, -49, -53, 11, -34, 44, -9, 61, -16, -15, -14, 4, 58, -9, -37, -50, 44, 39, -18, 64, -32, 17, 64, 47, 41, 50, -27, -61, 16, 60, 26, -3, 34, 31, 39, 65, 13, 43, 24, 57, 2, -2, -37, -41, 58, 47, -5, -27, -27, 46, 26, 61, -34, -62, 62, 26, 21, -13, 14, -14, -25, 19, 45, -29, 12, -60, -27, -22, -30, 38, 36, -37, -39, 63, -16, 0, 25, 27, 49, -15, -17, 16, 19, -35, -13, 11, 
  3, 113, 1, -37, -49, -26, 28, 9, 61, 60, -30, 54, 53, 16, 14, -8, 14, -32, -16, 29, -7, -35, 58, -22, 12, 18, -13, 1, 47, 74, -12, 39, 79, -4, 31, 36, -46, 22, 25, 23, -2, -4, 47, 59, 19, -34, -41, 35, 10, 29, 33, 39, -40, 26, 30, -21, 46, -26, -16, 68, -28, 47, -22, 43, -19, 25, 24, -5, -12, -2, -24, 65, 13, 22, 10, 32, -34, -44, -44, -23, 46, 5, 11, -31, 9, 41, 70, 14, 29, 6, -47, 22, -25, -2, 25, -39, -31, -33, 65, -24, -10, 43, 37, -41, 0, 56, -26, -10, 23, 53, 64, 38, -60, -36, 27, 11, 2, -23, -18, 3, 61, 14, 33, -20, 23, 43, -35, 16, -14, 15, -27, 11, 49, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,133 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0034542737994343042, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.21893256902694702, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.14922049641609192, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,7 } };
const TfArray<1, float> quant9_scale = { 1, { 0.16792958974838257, } };
const TfArray<1, int> quant9_zero = { 1, { -49 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,7 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 133, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 28, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 2660, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 144), (TfLiteIntArray*)&g0::tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 7, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 7, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
